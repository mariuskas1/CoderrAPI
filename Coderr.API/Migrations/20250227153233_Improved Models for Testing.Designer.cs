// <auto-generated />
using System;
using Coderr.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Coderr.API.Migrations
{
    [DbContext(typeof(CoderrDbContext))]
    [Migration("20250227153233_Improved Models for Testing")]
    partial class ImprovedModelsforTesting
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Coderr.API.Models.Domain.Offer", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("UserId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Coderr.API.Models.Domain.OfferDetails", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("delivery_time_in_days")
                        .HasColumnType("int");

                    b.Property<string>("features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("offer_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("revisions")
                        .HasColumnType("int");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferDetails");
                });

            modelBuilder.Entity("Coderr.API.Models.Domain.Order", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfferDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("delivery_time_in_days")
                        .HasColumnType("int");

                    b.Property<Guid>("detailsid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("features")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("offer_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("revisions")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("BusinessUserId");

                    b.HasIndex("CustomerUserId");

                    b.HasIndex("detailsid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Coderr.API.Models.Domain.Review", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BusinessUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("rating")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("BusinessUserId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Coderr.API.Models.Domain.UserProfile", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("file")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("working_hours")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Coderr.API.Models.Domain.Offer", b =>
                {
                    b.HasOne("Coderr.API.Models.Domain.UserProfile", "user")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("user");
                });

            modelBuilder.Entity("Coderr.API.Models.Domain.OfferDetails", b =>
                {
                    b.HasOne("Coderr.API.Models.Domain.Offer", "offer")
                        .WithMany("details")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("offer");
                });

            modelBuilder.Entity("Coderr.API.Models.Domain.Order", b =>
                {
                    b.HasOne("Coderr.API.Models.Domain.UserProfile", "business_user")
                        .WithMany()
                        .HasForeignKey("BusinessUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Coderr.API.Models.Domain.UserProfile", "customer_user")
                        .WithMany()
                        .HasForeignKey("CustomerUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Coderr.API.Models.Domain.OfferDetails", "details")
                        .WithMany()
                        .HasForeignKey("detailsid")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("business_user");

                    b.Navigation("customer_user");

                    b.Navigation("details");
                });

            modelBuilder.Entity("Coderr.API.Models.Domain.Review", b =>
                {
                    b.HasOne("Coderr.API.Models.Domain.UserProfile", "business_user")
                        .WithMany()
                        .HasForeignKey("BusinessUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Coderr.API.Models.Domain.UserProfile", "reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("business_user");

                    b.Navigation("reviewer");
                });

            modelBuilder.Entity("Coderr.API.Models.Domain.Offer", b =>
                {
                    b.Navigation("details");
                });
#pragma warning restore 612, 618
        }
    }
}
